<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Linh M. Tran]]></title>
  <link href="http://linhmtran168.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://linhmtran168.github.io/"/>
  <updated>2014-03-18T01:37:04+07:00</updated>
  <id>http://linhmtran168.github.io/</id>
  <author>
    <name><![CDATA[Linh M. Tran]]></name>
    <email><![CDATA[linh.mtran168@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Postgres UUID in Rails]]></title>
    <link href="http://linhmtran168.github.io/blog/2014/03/17/postgres-uuid-in-rails/"/>
    <updated>2014-03-17T22:51:40+07:00</updated>
    <id>http://linhmtran168.github.io/blog/2014/03/17/postgres-uuid-in-rails</id>
    <content type="html"><![CDATA[<h1>Intro &amp; Setup</h1>

<p>Rails 4 has native support for <a href="http://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a> in PostgreSQL so I decided to give it a try in my test project.</p>

<p>First, you need to enable PostgreSQL extension &lsquo;uuid-ossp&rsquo;. Create a new migration like this:</p>

<p><code>sh
rails generate migration enable_uuid_ossp
</code></p>

<p>And edit the newly created migration file</p>

<p>```ruby
class EnableUuidOssp &lt; ActiveRecord::Migration
  def change</p>

<pre><code>enable_extension 'uuid-ossp'
</code></pre>

<p>  end
end
```</p>

<p>After that, run <code>rake db:migrate</code>. After this, you can use start using <code>:uuid</code> as your table&rsquo;s primary key in other migrations. For example:</p>

<p><code>sh
rails generate migration create_users
</code></p>

<p>```ruby
class CreateUsers &lt; ActiveRecord::Migration
  def change
   create_table :users, id: :uuid  do |t|</p>

<pre><code>  t.string :username
  t.string :fullname
  t.string :email
  t.string :encrypted_password
  t.timestamps
end
</code></pre>

<p>  end
end
```</p>

<p>You can also use <code>:uuid</code> not as ID replacement but on a specific column</p>

<p>```ruby
class AddSuperIdToStudents &lt; ActiveRecord::Migration
  def change</p>

<pre><code>add_column :students, :super_id, :uuid
</code></pre>

<p>  end
end
```</p>

<h1>Drawbacks</h1>

<p>Using UUID as ID replacement will make <code>Model.first</code> and <code>Model.last</code> methods not working anymore (UUID is all about randomness after all). Luckily, you can use <code>created_at</code> attribute and implement <code>default_scope</code> in your model as following:</p>

<p><code>ruby
class User &lt; ActiveRecord::Base
  default_scope -&gt; { order('created_at ASC') }
end
</code>
Or you can define you own scopes using <code>created_at</code>:</p>

<p><code>ruby
class User &lt; ActiveRecodr::Base
  scope :first, -&gt; { order("created_at").first }
  scope :last, -&gt; { order("created_at DESC").first }
end
</code></p>

<p>Another problem is that <code>t.references</code> method in your migrations. If your <strong>users</strong> table have UUID as ID and you define reference to it in other tables using <code>t.references :user</code>, it will create a <code>user_id</code> column with <code>integer</code> as the type in those tables. Of course, it&rsquo;s not going to work. You must specifically define the reference like this:</p>

<p><code>ruby
...
t.uuid :user_id
...
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Bower With Rails]]></title>
    <link href="http://linhmtran168.github.io/blog/2014/02/28/using-bower-with-rails/"/>
    <updated>2014-02-28T00:56:54+07:00</updated>
    <id>http://linhmtran168.github.io/blog/2014/02/28/using-bower-with-rails</id>
    <content type="html"><![CDATA[<p>Rails got Asset Pipeline and to take full advantage of it, Ruby developers have created gems for almost notable frontend libraries. After all, it&rsquo;s pretty awesome to be able to  live entirely in Ruby world without the need to manually add Javascript, Css files. But not all frontend projects are gemified and even it&rsquo;s the case, there is no guarantee that those gems will be properly maintained. It&rsquo;s the reason for me to start using <strong><a href="http://bower.io/">bower</a></strong> in my project.</p>

<p>If you haven&rsquo;t heard about <strong>bower</strong>, you must have been living under a rock. It&rsquo;s now the de facto front-end package manager for the web. Almost (if not all) frontend libraries are now created to be compatible with <strong>bower</strong> (a <strong>bower</strong> package). Using <strong>bower</strong>, you can search, list, install, uninstall, update and manage dependencies for your projects.</p>

<p>To start using <strong>bower</strong>, you must install <strong><a href="http://nodejs.org/">nodejs</a></strong> and install <strong>bower</strong> using <strong><a href="https://www.npmjs.org/">npm</a></strong>. Another dependency, but believe me, it&rsquo;s worth the effort.</p>

<p><code>sh
$ brew install node
$ npm install -g bower
</code>
<em>(If you want to play more with nodejs, I recommend you to try <strong><a href="https://github.com/creationix/nvm">nvm</a></strong> and use it to manage your nodejs installations)</em></p>

<p>After that, create a <code>.bowerrc</code> file with the following contents at the root of the project folder to change default location for <strong>bower</strong>&rsquo;s packages from <code>./bower_components</code> to <code>./vendor/bower_components</code> (you can choose another folder if you want):</p>

<p><code>json
{
  "directory": "vendor/assets/bower_components"
}
</code></p>

<p>Then, use <code>bower init</code> to generate a <code>bower.json</code> for your project. Using this file, You can manage your project information and dependencies:</p>

<p>``` json
{
  &ldquo;name&rdquo;: &ldquo;Your App Name&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.0.1&rdquo;,
  &ldquo;authors&rdquo;: [</p>

<pre><code>"Your Email"
</code></pre>

<p>  ],
  &ldquo;description&rdquo;: &ldquo;Description&rdquo;,
  &ldquo;keywords&rdquo;: [
  ],
  &ldquo;license&rdquo;: &ldquo;MIT&rdquo;,
  &ldquo;private&rdquo;: true,
  &ldquo;ignore&rdquo;: [</p>

<pre><code>"**/.*",
"node_modules",
"bower_components",
"vendor/assets/bower_components",
"test",
"tests"
</code></pre>

<p>  ],
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"jquery": "*"
</code></pre>

<p>  }
}
```</p>

<p>Then, you must add the <strong>bower</strong>&rsquo;s package folder to Rails' Asset Pipeline by editing the <code>config/application.rb</code> as following:</p>

<p><code>ruby
...
class Application &lt; Rails::Application
  ...
  # Include Bower components in compiled assets
  config.assets.paths &lt;&lt; Rails.root.join('vendor', 'assets', 'bower_components')
end
...
</code></p>

<p>Now, <strong>bower</strong> is already at your command. You can search for packages, add them in <strong>dependencies</strong> section of <code>bower.json</code> file and <code>bower install</code> in your project&rsquo;s root folder to install all of them. Alternatively, you can install each package separately as following:</p>

<p>``` sh
$ bower search pace
Search results:</p>

<pre><code>pace git://github.com/HubSpot/pace.git
suit-utils-space git://github.com/suitcss/utils-space.git
....
</code></pre>

<p>$ bower install pace &mdash;save # &mdash;save will save the dependency to bower.json file, use &mdash;save-dev for development dependency
```</p>

<p>To use bower packages, just add them to your asset manifest files like any other frontend library. For example:</p>

<p>``` javascript</p>

<h1>app/assets/javascripts/application.js</h1>

<p>&hellip;
//= require pace/pace
&hellip;
```</p>

<p>``` css</p>

<h1>app/assets/stylesheets/application.css</h1>

<p>&hellip;
*= require pace/themes/pace-theme-minimal.css
&hellip;
```</p>

<p>You can also list your installed bower packages, update or remove them</p>

<p><code>sh
$ bower list
$ bower update
$ bower remove $package_name
</code></p>

<p>In my personal opinion, <strong>bower</strong> is really a great tool, it helps manage frontend libraries much more easier. Combine with Rails' Asset Pipeline, it makes a powerful tool to conquer any kind of frontend related projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Mac OSX 10.9 for RoR Development]]></title>
    <link href="http://linhmtran168.github.io/blog/2013/12/19/setting-mac-osx-for-ror-development/"/>
    <updated>2013-12-19T23:09:13+07:00</updated>
    <id>http://linhmtran168.github.io/blog/2013/12/19/setting-mac-osx-for-ror-development</id>
    <content type="html"><![CDATA[<p>There are many reasons that I have always wanted to learn Rails. The first is that it&rsquo;s written in Ruby, a language with elegant syntax that can bring joy to developers. Second, Rails is a convention over configuration framework, it forces developers to follow best practice, agile development flow to be able to get the most out of it. Despite all that, I&rsquo;ve never been able to be determined enough to learn it fully and use it in my work. But now the chance has come, let&rsquo;s get started with an OSX environment ready for Rails.</p>

<p>First, we downloading and installing some dependencies so that ruby can be compiled in our OSX system. Of course, you can use the system ruby come with OSX, but I can guarantee that it will bring to you in the future. We will need to install the Xcode Command Line Tools. Either download it directly from <a href="http://developer.apple.com/downloads">Apple website</a>, or open Xcode, go to <code>Preferences-&gt;Downloads</code>, download it from here or if you are using OSX 10.9 type the following command in the terminal</p>

<p><code>sh
$ xcode-select --install
</code></p>

<p>Now, installing the needed compiler to build ruby from source using Homebrew (In case you don&rsquo;t know what Homebrew is and you are using Mac OSX, I suggest you go immediately to <a href="https://github.com/Homebrew/homebrew">its website</a> and read the docs to install it)</p>

<p><code>sh
$ brew install apple-gcc42
</code></p>

<p>The second thing we must do is installing a ruby version manager to manage and install ruby.  In Ruby world, <a href="http://rvm.io">RVM</a>, <a href="https://github.com/sstephenson/rbenv">rbenv</a>, <a href="https://github.com/postmodern/chruby">chruby</a> are the 3 most popular version manager. I used <strong>rvm</strong>, but it&rsquo;s just too heavy so I switch to <strong>rbenv</strong> and have been happy with it so far (I haven&rsquo;t tried <strong>chruby</strong> yet but have heard some good things about it). Installing rbenv is really easy with Homebrew</p>

<p><code>sh
$ brew install rbenv
</code></p>

<p>In case, brew does not add the rbenv bootstrap command to your <code>.bashrc</code> or <code>.zshrc</code>, do it yourself</p>

<p>```sh</p>

<h1>.zshrc or .bashrc</h1>

<p>…
if which rbenv > /dev/null; then eval &ldquo;$(rbenv init &ndash;)&rdquo;; fi
```</p>

<p>Default, <strong>rbenv</strong> will create a <code>.rbenv</code> folder in your home folder and use it to hold ruby installations and gems but I prefer to use Homebrew&rsquo;s directories so I do as Homebrew&rsquo;s instruction and add the following to my <code>.zprofile</code> (.bashrc, .zshrc… in your case)</p>

<p><code>
export RBENV_ROOT=/usr/local/var/rbenv
</code></p>

<p>We also must install <strong>ruby-build</strong> so that rbenv can download and install ruby</p>

<p><code>sh
$ brew install ruby-build
</code></p>

<p>Yay, we are ready to install ruby with rbenv</p>

<p><code>sh
$ rbenv install 2.0.0.p353 # The latest ruby version
$ rbenv global 2.0.0.p353 # Make it the default ruby version instead of system one
…
$ ruby -v
ruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-darwin13.0.0]
$ which ruby
/usr/local/var/rbenv/shims/ruby
$ which gem
/usr/local/var/rbenv/shims/gem
</code></p>

<p>Next is installing some necessary gems (for me)</p>

<p>```sh
$ gem install bundler rails pry cocoapods awesome_print</p>

<h1>Rehash so that shim executables are available for newly installed gems</h1>

<p>$ rbenv rehash
```</p>

<p>I also installed some useful rbenv plugins using brew (the main reason that I use brew&rsquo;s directories for rbenv: rbenv plugins installed with brew work nicely with brew&rsquo;s directories).</p>

<p>```sh</p>

<h1>You can google, and find out the functions of each plugin (They are pretty useful)</h1>

<p>$ brew install rbenv-binstubs rbenv-default-gems rbenv-gem-rehash rbenv-vars
```</p>

<p>Congratulation, we are all set now. Let create our first rails app.</p>

<p>```sh
$ rails new hello_world
$ cd hello_world</p>

<h1>Want to know what the following command do, go to rbenv docs or I will cover it in a later blog post</h1>

<p>$ bundle install —binstub .bundle/bin
```</p>
]]></content>
  </entry>
  
</feed>
