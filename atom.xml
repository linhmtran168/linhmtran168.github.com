<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Linh M. Tran]]></title>
  <link href="http://linhmtran168.github.io/atom.xml" rel="self"/>
  <link href="http://linhmtran168.github.io/"/>
  <updated>2013-12-20T00:55:20+07:00</updated>
  <id>http://linhmtran168.github.io/</id>
  <author>
    <name><![CDATA[Linh M. Tran]]></name>
    <email><![CDATA[linh.mtran168@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Mac OSX 10.9 for RoR Development]]></title>
    <link href="http://linhmtran168.github.io/blog/2013/12/19/setting-mac-osx-for-ror-development/"/>
    <updated>2013-12-19T23:09:13+07:00</updated>
    <id>http://linhmtran168.github.io/blog/2013/12/19/setting-mac-osx-for-ror-development</id>
    <content type="html"><![CDATA[<p>There are many reasons that I have always wanted to learn Rails. The first is that it&rsquo;s written in Ruby, a language with elegant syntax that can bring joy to developers. Second, Rails is a convention over configuration framework, it forces developers to follow best practice, agile development flow to be able to get the most out of it. Despite all that, I&rsquo;ve never been able to be determined enough to learn it fully and use it in my work. But now the chance has come, let&rsquo;s get started with an OSX environment ready for Rails.</p>

<p>First, we downloading and installing some dependencies so that ruby can be compiled in our OSX system. Of course, you can use the system ruby come with OSX, but I can guarantee that it will bring to you in the future. We will need to install the Xcode Command Line Tools. Either download it directly from <a href="http://developer.apple.com/downloads">Apple website</a>, or open Xcode, go to <code>Preferences-&gt;Downloads</code>, download it from here or if you are using OSX 10.9 type the following command in the terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>xcode-select --install
</span></code></pre></td></tr></table></div></figure>


<p>Now, installing the needed compiler to build ruby from source using Homebrew (In case you don&rsquo;t know what Homebrew is and you are using Mac OSX, I suggest you go immediately to <a href="https://github.com/Homebrew/homebrew">its website</a> and read the docs to install it)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install apple-gcc42
</span></code></pre></td></tr></table></div></figure>


<p>The second thing we must do is installing a ruby version manager to manage and install ruby.  In Ruby world, <a href="http://rvm.io">RVM</a>, <a href="https://github.com/sstephenson/rbenv">rbenv</a>, <a href="https://github.com/postmodern/chruby">chruby</a> are the 3 most popular version manager. I used <strong>rvm</strong>, but it&rsquo;s just too heavy so I switch to <strong>rbenv</strong> and have been happy with it so far (I haven&rsquo;t tried <strong>chruby</strong> yet but have heard some good things about it). Installing rbenv is really easy with Homebrew</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install rbenv
</span></code></pre></td></tr></table></div></figure>


<p>In case, brew does not add the rbenv bootstrap command to your <code>.bashrc</code> or <code>.zshrc</code>, do it yourself</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># .zshrc or .bashrc</span>
</span><span class='line'>…
</span><span class='line'><span class="k">if </span>which rbenv &gt; /dev/null; <span class="k">then </span><span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>; <span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Default, <strong>rbenv</strong> will create a <code>.rbenv</code> folder in your home folder and use it to hold ruby installations and gems but I prefer to use Homebrew&rsquo;s directories so I do as Homebrew&rsquo;s instruction and add the following to my <code>.zprofile</code> (.bashrc, .zshrc… in your case)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">RBENV_ROOT</span><span class="o">=</span>/usr/local/var/rbenv
</span></code></pre></td></tr></table></div></figure>


<p>We also must install <strong>ruby-build</strong> so that rbenv can download and install ruby</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install ruby-build
</span></code></pre></td></tr></table></div></figure>


<p>Yay, we are ready to install ruby with rbenv</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rbenv install 2.0.0.p353 <span class="c"># The latest ruby version</span>
</span><span class='line'><span class="nv">$ </span>rbenv global 2.0.0.p353 <span class="c"># Make it the default ruby version instead of system one</span>
</span><span class='line'>…
</span><span class='line'><span class="nv">$ </span>ruby -v
</span><span class='line'>ruby 2.0.0p353 <span class="o">(</span>2013-11-22 revision 43784<span class="o">)</span> <span class="o">[</span>x86_64-darwin13.0.0<span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>which ruby
</span><span class='line'>/usr/local/var/rbenv/shims/ruby
</span><span class='line'><span class="nv">$ </span>which gem
</span><span class='line'>/usr/local/var/rbenv/shims/gem
</span></code></pre></td></tr></table></div></figure>


<p>Next is installing some necessary gems (for me)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gem install bundler rails pry cocoapods awesome_print
</span><span class='line'><span class="c"># Rehash so that shim executables are available for newly installed gems</span>
</span><span class='line'><span class="nv">$ </span>rbenv rehash
</span></code></pre></td></tr></table></div></figure>


<p>I also installed some useful rbenv plugins using brew (the main reason that I use brew&rsquo;s directories for rbenv: rbenv plugins installed with brew work nicely with brew&rsquo;s directories).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># You can google, and find out the functions of each plugin (They are pretty useful)</span>
</span><span class='line'><span class="nv">$ </span>brew install rbenv-binstubs rbenv-default-gems rbenv-gem-rehash rbenv-vars
</span></code></pre></td></tr></table></div></figure>


<p>Congratulation, we are all set now. Let create our first rails app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rails new hello_world
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>hello_world
</span><span class='line'><span class="c"># Want to know what the following command do, go to rbenv docs or I will cover it in a later blog post</span>
</span><span class='line'><span class="nv">$ </span>bundle install —binstub .bundle/bin
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ditching Oh-my-zsh for Prezto]]></title>
    <link href="http://linhmtran168.github.io/blog/2013/12/15/ditching-oh-my-zsh-for-prezto/"/>
    <updated>2013-12-15T01:22:22+07:00</updated>
    <id>http://linhmtran168.github.io/blog/2013/12/15/ditching-oh-my-zsh-for-prezto</id>
    <content type="html"><![CDATA[<h4>Oh My Zsh, full of features but slow</h4>

<p>I&rsquo;m a long time user of <a href="https://github.com/robbyrussell/oh-my-zsh">Oh-my-zsh</a>. After setting up a new system (OSX or Linux, of course, no Windows), the first thing I often do is changing my default shell to Zsh and installing Oh-my-zsh. It&rsquo;s a brilliant configuration framework for zsh with a lot of themes and plugins that make it a joy to working in the terminal. But it has a major drawback, slow startup time. For me, with a lot of plugins enabled, it often takes several seconds for the terminal in iTerm2 to be fully ready.</p>

<h4>Enter Prezto</h4>

<p>I&rsquo;ve heard of <a href="https://github.com/sorin-ionescu/prezto">prezto</a> before, but at that time, to me, Oh-my-zsh is too good and the thought of having to learn the convention and update my current configuration to that of a new framework made me feel lazy :) But today, after reading a thread in StackOverflow that stated that Prezto is an improvement to Oh-my-zsh and it has no slow startup time issue, I decided to give it a try.</p>

<p>Installing presto is really straight forward, just following the guide in its website (remember to uninstall Oh-my-zsh and backup your configuration).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Uninstall oh my zsh</span>
</span><span class='line'><span class="nv">$ </span>uninstall_oh_my_zsh
</span><span class='line'>
</span><span class='line'><span class="c"># Open new shell, open zsh and clone the presto repo</span>
</span><span class='line'><span class="nv">$ </span>git clone --recursive https://github.com/sorin-ionescu/prezto.git <span class="s2">&quot;${ZDOTDIR:-$HOME}/.zprezto&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get prezto&#39;s default configuration</span>
</span><span class='line'><span class="nv">$ </span>setopt EXTENDED_GLOB
</span><span class='line'><span class="k">for </span>rcfile in <span class="s2">&quot;${ZDOTDIR:-$HOME}&quot;</span>/.zprezto/runcoms/^README.md<span class="o">(</span>.N<span class="o">)</span>; <span class="k">do</span>
</span><span class='line'><span class="k">  </span>ln -s <span class="s2">&quot;$rcfile&quot;</span> <span class="s2">&quot;${ZDOTDIR:-$HOME}/.${rcfile:t}&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change default shell to zsh</span>
</span><span class='line'><span class="nv">$ </span>chsh -s /bin/zsh
</span></code></pre></td></tr></table></div></figure>


<p>After that, you are done, prezto is ready at your command. I was really impressed with prezto, even with a lot of modules enabled (git, rails, ruby, python, node&hellip;), it&rsquo;s still very fast compared to Oh-my-zsh. Now all that left is to configure prezto to my liking. I did have to convert my shell settings in Oh-my-zsh&rsquo;s <strong><em>.zshrc</em></strong> to that of Prezto but it only took a small amount of time. To modify and add custom configuration, in my case, you just have to make changes to those 3 files that prezto symlinks in your home folder: <strong><em>.zprofile</em></strong>, <strong><em>.zshrc</em></strong>, <strong><em>.zpreztorc</em></strong></p>

<p>I added my custom paths to <strong>.zprofile</strong> so that they will be available for even apps outside of the terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>...
</span><span class='line'><span class="c"># GO</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$HOME</span>/SkyDrive/go
</span><span class='line'>
</span><span class='line'><span class="c"># Set the list of directories that Zsh searches for programs.</span>
</span><span class='line'><span class="nv">path</span><span class="o">=(</span>
</span><span class='line'>  /usr/local/<span class="o">{</span>bin,sbin<span class="o">}</span>
</span><span class='line'>  <span class="nv">$GOPATH</span>/bin
</span><span class='line'>  <span class="nv">$HOME</span>/.cabal/bin
</span><span class='line'>  /opt/homebrew-cask/Caskroom/postgres/latest/Postgres.app/Contents/MacOS/bin
</span><span class='line'>  /usr/local/heroku/bin
</span><span class='line'>  <span class="nv">$path</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>In <strong>.zshrc</strong> file, I added my aliases and some variables for working with python</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>...
</span><span class='line'><span class="c"># Alias</span>
</span><span class='line'><span class="c"># OSX</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">fixow</span><span class="o">=</span><span class="s1">&#39;/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain user;killall Finder;echo &quot;Open With has been rebuilt, Finder will relaunch&quot;&#39;</span>
</span><span class='line'><span class="c"># tmux</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">tma</span><span class="o">=</span><span class="s1">&#39;tmux attach -d -t&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">tmn</span><span class="o">=</span><span class="s1">&#39;tmux new -s $(basename $(pwd))&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">tml</span><span class="o">=</span><span class="s1">&#39;tmux list-sessions&#39;</span>
</span><span class='line'><span class="c"># bower</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">bower</span><span class="o">=</span><span class="s1">&#39;noglob bower&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Python virtualenv configuration</span>
</span><span class='line'><span class="nb">export </span><span class="nv">WORKON_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/.virtualenvs
</span><span class='line'><span class="nb">export </span><span class="nv">VIRTUALENVWRAPPER_VIRTUALENV_ARGS</span><span class="o">=</span><span class="s1">&#39;--no-site-packages&#39;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>And in <strong>.zpreztorc</strong>, I added the modules that I need (git, ruby, python, node&hellip;) and configure prezto to use a custom theme that I modified from the default sorin theme.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>...
</span><span class='line'><span class="c"># prezto modules</span>
</span><span class='line'>zstyle <span class="s1">&#39;:prezto:load&#39;</span> pmodule <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;environment&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;terminal&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;editor&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;history&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;history-substring-search&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;directory&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;spectrum&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;utility&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;completion&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;homebrew&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;osx&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;ruby&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;rails&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;git&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;node&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;python&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;haskell&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;syntax-highlighting&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;tmux&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;utility&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;prompt&#39;</span>
</span><span class='line'>...
</span><span class='line'><span class="c"># presto theme</span>
</span><span class='line'>zstyle <span class="s1">&#39;:prezto:module:prompt&#39;</span> theme <span class="s1">&#39;superlinh&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And tada, this is my final product
<img src="http://linhmtran168.github.io/images/shell_prezto.png" title="My Prezto" alt="My Prezto"></p>

<p>Generally, I&rsquo;m pretty pleased with prezto. I think I&rsquo;m gonna use it in my terminal from now on. You can get all of my configurations and custom theme here on <a href="https://github.com/linhmtran168/mac_dotfiles">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Setup Boris With MAMP in Mac OSX Mavericks']]></title>
    <link href="http://linhmtran168.github.io/blog/2013/12/10/setup-boris-with-mamp-in-mac-osx-mavericks/"/>
    <updated>2013-12-10T11:34:39+07:00</updated>
    <id>http://linhmtran168.github.io/blog/2013/12/10/setup-boris-with-mamp-in-mac-osx-mavericks</id>
    <content type="html"><![CDATA[<p>For me who is used to having REPL as an essential tools for development, <a href="https://github.com/d11wtq/boris">Boris</a> is a must have when developing PHP web app.
But after updating to MAMP 2.0 and PHP 5.5.3, it stopped working. There is no error output, the REPL just doesn&rsquo;t appear.
After several hours of googling, I found out the reason is that MAMP&rsquo;s PHP is built with out <strong>pcntl</strong> and <strong>readline</strong> support, which boris depends on. To get those features, there is no other way then manually compile and add them to MAMP&rsquo;s PHP installation.</p>

<p>First, we need to download the source code for MAMP&rsquo;s PHP. In my case it&rsquo;s PHP 5.5.3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>php -v
</span><span class='line'>Copyright <span class="o">(</span>c<span class="o">)</span> 1997-2013 The PHP Group
</span><span class='line'>Zend Engine v2.5.0, Copyright <span class="o">(</span>c<span class="o">)</span> 1998-2013 Zend Technologies
</span><span class='line'>    with Zend OPcache v7.0.3-dev, Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2013, by Zend Technologies
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>wget http://museum.php.net/php5/php-5.5.3.tar.gz
</span><span class='line'><span class="nv">$ </span>tar -xzvf php-5.5.3.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>After that change the folder name to <strong><em>php</em></strong> and move it <strong><em>include</em></strong> folder in MAMP&rsquo;s PHP 5.5.3 folder</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mv php-5.5.3 php
</span><span class='line'><span class="nv">$ </span>mkdir -p /Applications/MAMP/bin/php/php5.5.3/include
</span><span class='line'><span class="nv">$ </span>mv php /Applications/MAMP/bin/php/php5.5.3/include
</span></code></pre></td></tr></table></div></figure>


<p>Then, use the configure it to prepare all the necessary header files</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /Applications/MAMP/bin/php/php5.5.3/include/php
</span><span class='line'><span class="nv">$ </span>./configure
</span></code></pre></td></tr></table></div></figure>


<p>Now, we process to build the <strong>pcntl</strong> and <strong>readline</strong> extension.
But before that, we must set some flags so that they are compiled with dual 32bit and 64bit architecture as MAMP PHP was built this way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ MACOSX_DEPLOYMENT_TARGET</span><span class="o">=</span>10.9
</span><span class='line'><span class="nv">$ CFLAGS</span><span class="o">=</span><span class="s2">&quot;-arch i386 -arch x86_64 -g -Os -pipe -no-cpp-precomp&quot;</span>
</span><span class='line'><span class="nv">$ CCFLAGS</span><span class="o">=</span><span class="s2">&quot;-arch i386 -arch x86_64 -g -Os -pipe&quot;</span>
</span><span class='line'><span class="nv">$ CXXFLAGS</span><span class="o">=</span><span class="s2">&quot;-arch i386 -arch x86_64 -g -Os -pipe&quot;</span>
</span><span class='line'><span class="nv">$ LDFLAGS</span><span class="o">=</span><span class="s2">&quot;-arch i386 -arch x86_64 -bind_at_load&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span>CFLAGS CXXFLAGS LDFLAGS CCFLAGS MACOSX_DEPLOYMENT_TARGET
</span></code></pre></td></tr></table></div></figure>


<p>Now, what left is compiling the extensions, move the compiled <strong><em>.so</em></strong> files to MAMP&rsquo;s PHP extensions directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>ext/pcntl
</span><span class='line'><span class="nv">$ </span>phpize
</span><span class='line'><span class="nv">$ </span>./configure
</span><span class='line'><span class="nv">$ </span>make
</span><span class='line'><span class="nv">$ </span>cp modules/pcntl.so /Applications/MAMP/bin/php/php5.5.3/lib/php/extensions/no-debug-non-zts-20121212
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../readline
</span><span class='line'><span class="nv">$ </span>phpize
</span><span class='line'><span class="nv">$ </span>./configure
</span><span class='line'><span class="nv">$ </span>make
</span><span class='line'><span class="nv">$ </span>cp modules/readline.so /Applications/MAMP/bin/php/php5.5.3/lib/php/extensions/no-debug-non-zts-20121212
</span></code></pre></td></tr></table></div></figure>


<p>Finally edit the MAMP&rsquo;s PHP php.ini file to include those extensions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;extension=pcntl.so\nextension=readline.so&quot;</span> &gt;&gt; /Applications/MAMP/bin/php/php5.5.3/conf/php.ini
</span></code></pre></td></tr></table></div></figure>


<p>Now we are done, just install boris if you haven&rsquo;t done so and enjoy playing PHP code in the terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install boris
</span><span class='line'><span class="nv">$ </span>boris
</span><span class='line'><span class="o">[</span>1<span class="o">]</span> boris&gt; <span class="nb">echo</span> <span class="s2">&quot;Hello World!\n&quot;</span>;
</span><span class='line'>Hello World!
</span><span class='line'><span class="o">[</span>2<span class="o">]</span> boris&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
