{"pageProps":{"article":{"title":"Moving from rbenv to chruby and direnv","slug":["2014","02","27","moving-from-rbenv-to-chruby"],"uri":"2014/02/27/moving-from-rbenv-to-chruby","updatedTime":"2014/02/27","content":"<p>I was a happy user of <strong>rbenv</strong>. It does have some drawback such as having to <code>rbenv rehash</code> everytime after installing new gems or having to manually manage binstubs.But all of them are trivial and can be solved with rbenv's plugins like <code>rbenv-binstubs</code> , <code>rbenv-rehash</code>. But I wanted to try something new, something minimal and so I moved to <strong><a href=\"https://github.com/postmodern/chruby\">chruby</a></strong></p>\n<p>Install <strong>chruby</strong> is pretty easy with <strong>homebrew</strong> (You are using homebrew, right?):</p>\n<pre><code class=\"hljs language-sh\">$ brew install chruby\n</code></pre>\n<p>After that, add the following line to your <code>~/.zshrc</code> or <code>~/.bashrc</code></p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-built_in\">source</span> /usr/<span class=\"hljs-built_in\">local</span>/share/chruby/chruby.sh\n</code></pre>\n<p>But as the name say chruby main function is only to <strong>change ruby</strong> :D. To install ruby you must either install <strong><a href=\"https://github.com/postmodern/ruby-install\">ruby-install</a></strong> or <strong><a href=\"https://github.com/sstephenson/ruby-build\">ruby-build</a></strong>.</p>\n<p>In case, you are already <strong>ruby-build</strong> (inevitably, if you are using <strong>rbenv</strong>), you can just use you old ruby installation folder by adding it to the <strong>RUBIES</strong> variable:</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-built_in\">source</span> /usr/<span class=\"hljs-built_in\">local</span>/share/chruby/chruby.sh\n\nRUBIES+=(~/.rbenv/versions/*)\n</code></pre>\n<p>After that, continuing to use <strong>ruby-build</strong> to manage your ruby installation</p>\n<p>In my case, I moved to <strong>ruby-install</strong>. Install it in just one command line:</p>\n<pre><code class=\"hljs language-sh\">$ brew install ruby-install\n</code></pre>\n<p>After that, install the latest and greatest Ruby:</p>\n<pre><code class=\"hljs language-sh\">$ ruby-install ruby 2.1.1\n</code></pre>\n<p>To make a ruby version default, simply just call chruby after it was initialized in your <code>~/.zshrc</code> or <code>~/.bashrc</code></p>\n<pre><code class=\"hljs language-sh\">...\nchruby ruby-2.1.1\n</code></pre>\n<p>If you want to define a specific ruby version for your project and enable auto-switching to that version when <code>cd</code> to your project folder (well, you should), add a <code>.ruby-version</code> file to the root of the folder:</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-comment\"># ./.ruby-version</span>\nruby-2.1.1\n</code></pre>\n<p>And enable the auto-switch function of <strong>chruby</strong> in your <code>~/.bashrc</code> or <code>~/.zshrc</code> file:</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-built_in\">source</span> /usr/<span class=\"hljs-built_in\">local</span>/share/chruby/chruby.sh\n<span class=\"hljs-built_in\">source</span> /usr/<span class=\"hljs-built_in\">local</span>/share/chruby/auto.sh\n</code></pre>\n<p>Now, you have a working <strong>chruby</strong> setup. But in your Rails project, you still have to type <code>$ bin/'your-god-knows-gem-command'</code> each time to use your generated gem binstubs. For some people, it's ok, but not for me :D. Previously, when using <strong>rbenv</strong>, it can be solved with the plugin <code>rbenv-binstubs</code>. With <strong>chruby</strong>, we will use <strong><a href=\"https://github.com/zimbatm/direnv\">direnv</a></strong> to eliminate this problem once and for all. Install it with <strong>brew</strong>:</p>\n<pre><code class=\"hljs language-sh\">$ brew install direnv\n</code></pre>\n<p>To add the <code>bin</code> folder of your project to the <strong>PATH</strong>, create a <code>.envrc</code> with the following line in the root of your project folder:</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$PWD</span>/bin:<span class=\"hljs-variable\">$PATH</span>\n</code></pre>\n<p>After that, allow <strong>direnv</strong> to modify your <strong>PATH</strong> in this folder</p>\n<pre><code class=\"hljs language-sh\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-string\">'your-project-folder'</span>\n$ direnv allow\ndirenv: loading .envrc\ndirenv: <span class=\"hljs-built_in\">export</span> ~PATH\n</code></pre>\n<p>From now on, in your project folder, forget the additional <code>bundle exec</code> or <code>bin/</code> and just type your favorite command.</p>\n<p>With <strong>chruby</strong> and <strong>direnv</strong> properly setup (you should if you followed my instructions), now we are have a combo of lightweight but effective weapons to adventure with any kind of Ruby project. I wish you all the best :D</p>"}},"__N_SSG":true}