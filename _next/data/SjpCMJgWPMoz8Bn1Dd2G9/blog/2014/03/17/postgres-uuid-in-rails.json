{"pageProps":{"article":{"title":"Postgres UUID in Rails","slug":["2014","03","17","postgres-uuid-in-rails"],"uri":"2014/03/17/postgres-uuid-in-rails","updatedTime":"2014/03/17","content":"<h1>Intro &#x26; Setup</h1>\n<p>Rails 4 has native support for <a href=\"http://en.wikipedia.org/wiki/Universally_unique_identifier\">UUID</a> in PostgreSQL so I decided to give it a try in my test project.</p>\n<p>First, you need to enable PostgreSQL extension 'uuid-ossp'. Create a new migration like this:</p>\n<pre><code class=\"hljs language-bash\">rails generate migration enable_uuid_ossp\n</code></pre>\n<p>And edit the newly created migration file</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EnableUuidOssp</span> &#x3C; ActiveRecord::Migration</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">change</span></span>\n    enable_extension <span class=\"hljs-string\">'uuid-ossp'</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>After that, run <code>rake db:migrate</code>. After this, you can use start using <code>:uuid</code> as your table's primary key in other migrations. For example:</p>\n<pre><code class=\"hljs language-ruby\">rails generate migration create_users\n</code></pre>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CreateUsers</span> &#x3C; ActiveRecord::Migration</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">change</span></span>\n   create_table <span class=\"hljs-symbol\">:users</span>, <span class=\"hljs-symbol\">id:</span> <span class=\"hljs-symbol\">:uuid</span>  <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|t|</span>\n      t.string <span class=\"hljs-symbol\">:username</span>\n      t.string <span class=\"hljs-symbol\">:fullname</span>\n      t.string <span class=\"hljs-symbol\">:email</span>\n      t.string <span class=\"hljs-symbol\">:encrypted_password</span>\n      t.timestamps\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>You can also use <code>:uuid</code> not as ID replacement but on a specific column</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AddSuperIdToStudents</span> &#x3C; ActiveRecord::Migration</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">change</span></span>\n    add_column <span class=\"hljs-symbol\">:students</span>, <span class=\"hljs-symbol\">:super_id</span>, <span class=\"hljs-symbol\">:uuid</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<h1>Drawbacks</h1>\n<p>Using UUID as ID replacement will make <code>Model.first</code> and <code>Model.last</code> methods not working anymore (UUID is all about randomness after all). Luckily, you can use <code>created_at</code> attribute and implement <code>default_scope</code> in your model as following:</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &#x3C; ActiveRecord::Base</span>\n  default_scope -> { order(<span class=\"hljs-string\">'created_at ASC'</span>) }\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Or you can define you own scopes using <code>created_at</code>:</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &#x3C; ActiveRecord::Base</span>\n  scope <span class=\"hljs-symbol\">:first</span>, -> { order(<span class=\"hljs-string\">\"created_at\"</span>).first }\n  scope <span class=\"hljs-symbol\">:last</span>, -> { order(<span class=\"hljs-string\">\"created_at DESC\"</span>).first }\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Another problem is that <code>t.references</code> method in your migrations. If your <strong>users</strong> table have UUID as ID and you define reference to it in other tables using <code>t.references :user</code>, it will create a <code>user_id</code> column with <code>integer</code> as the type in those tables. Of course, it's not going to work. You must specifically define the reference like this:</p>\n<pre><code class=\"hljs language-ruby\">...\nt.uuid <span class=\"hljs-symbol\">:user_id</span>\n...\n</code></pre>"}},"__N_SSG":true}