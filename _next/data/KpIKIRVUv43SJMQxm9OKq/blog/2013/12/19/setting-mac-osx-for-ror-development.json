{"pageProps":{"article":{"title":"Setting Mac OSX 10.9 for RoR development","slug":["2013","12","19","setting-mac-osx-for-ror-development"],"uri":"2013/12/19/setting-mac-osx-for-ror-development","updatedTime":"2013/12/19","content":"<p>There are many reasons that I have always wanted to learn Rails. The first is that it's written in Ruby, a language with elegant syntax that can bring joy to developers. Second, Rails is a convention over configuration framework, it forces developers to follow best practice, agile development flow to be able to get the most out of it. Despite all that, I've never been able to be determined enough to learn it fully and use it in my work. But now the chance has come, let's get started with an OSX environment ready for Rails.</p>\n<p>First, we downloading and installing some dependencies so that ruby can be compiled in our OSX system. Of course, you can use the system ruby come with OSX, but I can guarantee that it will bring to you in the future. We will need to install the Xcode Command Line Tools. Either download it directly from <a href=\"http://developer.apple.com/downloads\">Apple website</a>, or open Xcode, go to <code>Preferences->Downloads</code>, download it from here or if you are using OSX 10.9 type the following command in the terminal</p>\n<pre><code class=\"hljs language-sh\">$ xcode-select --install\n</code></pre>\n<p>Now, installing the needed compiler to build ruby from source using Homebrew (In case you don't know what Homebrew is and you are using Mac OSX, I suggest you go immediately to <a href=\"https://github.com/Homebrew/homebrew\">its website</a> and read the docs to install it)</p>\n<pre><code class=\"hljs language-sh\">$ brew install apple-gcc42\n</code></pre>\n<p>The second thing we must do is installing a ruby version manager to manage and install ruby.  In Ruby world, <a href=\"http://rvm.io\">RVM</a>, <a href=\"https://github.com/sstephenson/rbenv\">rbenv</a>, <a href=\"https://github.com/postmodern/chruby\">chruby</a> are the 3 most popular version manager. I used <strong>rvm</strong>, but it's just too heavy so I switch to <strong>rbenv</strong> and have been happy with it so far (I haven't tried <strong>chruby</strong> yet but have heard some good things about it). Installing rbenv is really easy with Homebrew</p>\n<pre><code class=\"hljs language-sh\">$ brew install apple-gcc42\n$ brew install rbenv\n</code></pre>\n<p>In case, brew does not add the rbenv bootstrap command to your <code>.bashrc</code> or <code>.zshrc</code>, do it yourself</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-comment\"># .zshrc or .bashrc</span>\n…\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">which</span> rbenv > /dev/null; <span class=\"hljs-keyword\">then</span> <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(rbenv init -)</span>\"</span>; <span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<p>Default, <strong>rbenv</strong> will create a <code>.rbenv</code> folder in your home folder and use it to hold ruby installations and gems but I prefer to use Homebrew's directories so I do as Homebrew's instruction and add the following to my <code>.zprofile</code> (.bashrc, .zshrc… in your case)</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-built_in\">export</span> RBENV_ROOT=/usr/<span class=\"hljs-built_in\">local</span>/var/rbenv\n</code></pre>\n<p>We also must install <strong>ruby-build</strong> so that rbenv can download and install ruby</p>\n<pre><code class=\"hljs language-sh\">$ brew install ruby-build\n</code></pre>\n<p>Yay, we are ready to install ruby with rbenv</p>\n<pre><code class=\"hljs language-sh\">$ rbenv install 2.0.0.p353 <span class=\"hljs-comment\"># The latest ruby version</span>\n$ rbenv global 2.0.0.p353 <span class=\"hljs-comment\"># Make it the default ruby version instead of system one</span>\n…\n$ ruby -v\nruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-darwin13.0.0]\n$ <span class=\"hljs-built_in\">which</span> ruby\n/usr/<span class=\"hljs-built_in\">local</span>/var/rbenv/shims/ruby\n$ <span class=\"hljs-built_in\">which</span> gem\n/usr/<span class=\"hljs-built_in\">local</span>/var/rbenv/shims/gem\n</code></pre>\n<p>Next is installing some necessary gems (for me)</p>\n<pre><code class=\"hljs language-sh\">$ rbenv install 2.0.0.p353 <span class=\"hljs-comment\"># The latest ruby version</span>\n$ gem install bundler rails pry cocoapods awesome_print\n<span class=\"hljs-comment\"># Rehash so that shim executables are available for newly installed gems</span>\n$ rbenv <span class=\"hljs-built_in\">rehash</span> \n</code></pre>\n<p>I also installed some useful rbenv plugins using brew (the main reason that I use brew's directories for rbenv: rbenv plugins installed with brew work nicely with brew's directories).</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-comment\"># You can google, and find out the functions of each plugin (They are pretty useful)</span>\n$ brew install rbenv-binstubs rbenv-default-gems rbenv-gem-rehash rbenv-vars \n</code></pre>\n<p>Congratulation, we are all set now. Let create our first rails app.</p>\n<pre><code class=\"hljs language-sh\">$ rails new hello_world\n$ <span class=\"hljs-built_in\">cd</span> hello_world\n<span class=\"hljs-comment\"># Want to know what the following command do, go to rbenv docs or I will cover it in a later blog post</span>\n$ bundle install —binstub .bundle/bin \n</code></pre>"}},"__N_SSG":true}