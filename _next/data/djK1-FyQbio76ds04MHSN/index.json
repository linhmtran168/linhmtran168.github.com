{"pageProps":{"articles":[{"title":"Postgres UUID in Rails","slug":["2014","03","17","postgres-uuid-in-rails"],"uri":"2014/03/17/postgres-uuid-in-rails","updatedTime":"2014/03/17","content":"\n# Intro & Setup\nRails 4 has native support for [UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) in PostgreSQL so I decided to give it a try in my test project.\n\nFirst, you need to enable PostgreSQL extension 'uuid-ossp'. Create a new migration like this:\n\n```bash\nrails generate migration enable_uuid_ossp\n```\n\nAnd edit the newly created migration file\n\n```ruby\nclass EnableUuidOssp < ActiveRecord::Migration\n  def change\n    enable_extension 'uuid-ossp'\n  end\nend\n```\n\nAfter that, run ```rake db:migrate```. After this, you can use start using ```:uuid``` as your table's primary key in other migrations. For example:\n\n```ruby\nrails generate migration create_users\n```\n\n```ruby\nclass CreateUsers < ActiveRecord::Migration\n  def change\n   create_table :users, id: :uuid  do |t|\n      t.string :username\n      t.string :fullname\n      t.string :email\n      t.string :encrypted_password\n      t.timestamps\n    end\n  end\nend\n```\n\nYou can also use ```:uuid``` not as ID replacement but on a specific column\n\n```ruby\nclass AddSuperIdToStudents < ActiveRecord::Migration\n  def change\n    add_column :students, :super_id, :uuid\n  end\nend\n```\n\n# Drawbacks\nUsing UUID as ID replacement will make ```Model.first``` and ```Model.last``` methods not working anymore (UUID is all about randomness after all). Luckily, you can use ```created_at``` attribute and implement ```default_scope``` in your model as following:\n\n```ruby\nclass User < ActiveRecord::Base\n  default_scope -> { order('created_at ASC') }\nend\n```\nOr you can define you own scopes using ```created_at```:\n\n```ruby\nclass User < ActiveRecord::Base\n  scope :first, -> { order(\"created_at\").first }\n  scope :last, -> { order(\"created_at DESC\").first }\nend\n```\n\nAnother problem is that ```t.references``` method in your migrations. If your __users__ table have UUID as ID and you define reference to it in other tables using ```t.references :user```, it will create a ```user_id``` column with ```integer``` as the type in those tables. Of course, it's not going to work. You must specifically define the reference like this:\n\n```ruby\n...\nt.uuid :user_id\n...\n```\n"},{"title":"Using Bower with Rails","slug":["2014","02","28","using-bower-with-rails"],"uri":"2014/02/28/using-bower-with-rails","updatedTime":"2014/02/28","content":"\nRails got Asset Pipeline and to take full advantage of it, Ruby developers have created gems for almost notable frontend libraries. After all, it's pretty awesome to be able to  live entirely in Ruby world without the need to manually add Javascript, Css files. But not all frontend projects are gemified and even it's the case, there is no guarantee that those gems will be properly maintained. It's the reason for me to start using __[bower](http://bower.io/)__ in my project.\n\nIf you haven't heard about __bower__, you must have been living under a rock. It's now the de facto front-end package manager for the web. Almost (if not all) frontend libraries are now created to be compatible with __bower__ (a __bower__ package). Using __bower__, you can search, list, install, uninstall, update and manage dependencies for your projects.\n\nTo start using __bower__, you must install __[nodejs](http://nodejs.org/)__ and install __bower__ using __[npm](https://www.npmjs.org/)__. Another dependency, but believe me, it's worth the effort.\n\n```sh\n$ brew install node\n$ npm install -g bower\n```\n\n_(If you want to play more with nodejs, I recommend you to try __[nvm](https://github.com/creationix/nvm)__ and use it to manage your nodejs installations)_\n\nAfter that, create a ```.bowerrc``` file with the following contents at the root of the project folder to change default location for __bower__'s packages from ```./bower_components``` to ```./vendor/bower_components``` (you can choose another folder if you want):\n\n```json\n{\n  \"directory\": \"vendor/assets/bower_components\"\n}\n```\n\nThen, use ```bower init``` to generate a ```bower.json``` for your project. Using this file, You can manage your project information and dependencies:\n\n```json\n{\n  \"name\": \"Your App Name\",\n  \"version\": \"0.0.1\",\n  \"authors\": [\n    \"Your Email\"\n  ],\n  \"description\": \"Description\",\n  \"keywords\": [\n  ],\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"vendor/assets/bower_components\",\n    \"test\",\n    \"tests\"\n  ],\n  \"dependencies\": {\n    \"jquery\": \"*\"\n  }\n}\n```\n\nThen, you must add the __bower__'s package folder to Rails' Asset Pipeline by editing the ```config/application.rb``` as following:\n\n```ruby\n...\nclass Application < Rails::Application\n  ...\n  # Include Bower components in compiled assets\n  config.assets.paths << Rails.root.join('vendor', 'assets', 'bower_components')\nend\n...\n```\n\nNow, __bower__ is already at your command. You can search for packages, add them in __dependencies__ section of ```bower.json``` file and ```bower install``` in your project's root folder to install all of them. Alternatively, you can install each package separately as following:\n\n```sh\n$ bower search pace\nSearch results:\n\n    pace git://github.com/HubSpot/pace.git\n    suit-utils-space git://github.com/suitcss/utils-space.git\n    ....\n$ bower install pace --save # --save will save the dependency to bower.json file, use --save-dev for development dependency\n```\n\nTo use bower packages, just add them to your asset manifest files like any other frontend library. For example:\n\n```javascript\n# app/assets/javascripts/application.js\n...\n//= require pace/pace\n...\n```\n```\n\n```css\n# app/assets/stylesheets/application.css\n...\n*= require pace/themes/pace-theme-minimal.css\n...\n```\n\nYou can also list your installed bower packages, update or remove them\n\n```sh\n$ bower list\n$ bower update\n$ bower remove $package_name\n```\n\nIn my personal opinion, __bower__ is really a great tool, it helps manage frontend libraries much more easier. Combine with Rails' Asset Pipeline, it makes a powerful tool to conquer any kind of frontend related projects.\n"},{"title":"Moving from rbenv to chruby and direnv","slug":["2014","02","27","moving-from-rbenv-to-chruby"],"uri":"2014/02/27/moving-from-rbenv-to-chruby","updatedTime":"2014/02/27","content":"\nI was a happy user of __rbenv__. It does have some drawback such as having to ```rbenv rehash``` everytime after installing new gems or having to manually manage binstubs.But all of them are trivial and can be solved with rbenv's plugins like ```rbenv-binstubs``` , ```rbenv-rehash```. But I wanted to try something new, something minimal and so I moved to __[chruby](https://github.com/postmodern/chruby)__\n\nInstall __chruby__ is pretty easy with __homebrew__ (You are using homebrew, right?):\n\n\n```sh\n$ brew install chruby\n```\n\nAfter that, add the following line to your ```~/.zshrc``` or ```~/.bashrc```\n\n```sh\nsource /usr/local/share/chruby/chruby.sh\n```\n\nBut as the name say chruby main function is only to __change ruby__ :D. To install ruby you must either install __[ruby-install](https://github.com/postmodern/ruby-install)__ or __[ruby-build](https://github.com/sstephenson/ruby-build)__. \n\nIn case, you are already __ruby-build__ (inevitably, if you are using __rbenv__), you can just use you old ruby installation folder by adding it to the __RUBIES__ variable:\n\n```sh\nsource /usr/local/share/chruby/chruby.sh\n\nRUBIES+=(~/.rbenv/versions/*)\n```\n\nAfter that, continuing to use __ruby-build__ to manage your ruby installation\n\nIn my case, I moved to __ruby-install__. Install it in just one command line:\n\n```sh\n$ brew install ruby-install\n```\n\nAfter that, install the latest and greatest Ruby:\n\n```sh\n$ ruby-install ruby 2.1.1\n```\n\nTo make a ruby version default, simply just call chruby after it was initialized in your ```~/.zshrc``` or ```~/.bashrc```\n\n```sh\n...\nchruby ruby-2.1.1\n```\n\nIf you want to define a specific ruby version for your project and enable auto-switching to that version when ```cd``` to your project folder (well, you should), add a ```.ruby-version``` file to the root of the folder:\n\n```sh\n# ./.ruby-version\nruby-2.1.1\n```\n\nAnd enable the auto-switch function of __chruby__ in your ```~/.bashrc``` or ```~/.zshrc``` file:\n\n```sh\nsource /usr/local/share/chruby/chruby.sh\nsource /usr/local/share/chruby/auto.sh\n```\n\nNow, you have a working __chruby__ setup. But in your Rails project, you still have to type ```$ bin/'your-god-knows-gem-command'``` each time to use your generated gem binstubs. For some people, it's ok, but not for me :D. Previously, when using __rbenv__, it can be solved with the plugin ```rbenv-binstubs```. With __chruby__, we will use __[direnv](https://github.com/zimbatm/direnv)__ to eliminate this problem once and for all. Install it with __brew__:\n\n```sh\n$ brew install direnv\n```\n\nTo add the ```bin``` folder of your project to the __PATH__, create a ```.envrc``` with the following line in the root of your project folder:\n\n```sh\nexport PATH=$PWD/bin:$PATH\n```\n\nAfter that, allow __direnv__ to modify your __PATH__ in this folder\n\n```sh\n$ cd 'your-project-folder'\n$ direnv allow\ndirenv: loading .envrc\ndirenv: export ~PATH\n```\n\nFrom now on, in your project folder, forget the additional ```bundle exec``` or ```bin/``` and just type your favorite command.\n\nWith __chruby__ and __direnv__ properly setup (you should if you followed my instructions), now we are have a combo of lightweight but effective weapons to adventure with any kind of Ruby project. I wish you all the best :D\n"},{"title":"Setting Mac OSX 10.9 for RoR development","slug":["2013","12","19","setting-mac-osx-for-ror-development"],"uri":"2013/12/19/setting-mac-osx-for-ror-development","updatedTime":"2013/12/19","content":"\nThere are many reasons that I have always wanted to learn Rails. The first is that it's written in Ruby, a language with elegant syntax that can bring joy to developers. Second, Rails is a convention over configuration framework, it forces developers to follow best practice, agile development flow to be able to get the most out of it. Despite all that, I've never been able to be determined enough to learn it fully and use it in my work. But now the chance has come, let's get started with an OSX environment ready for Rails.\n\nFirst, we downloading and installing some dependencies so that ruby can be compiled in our OSX system. Of course, you can use the system ruby come with OSX, but I can guarantee that it will bring to you in the future. We will need to install the Xcode Command Line Tools. Either download it directly from [Apple website](http://developer.apple.com/downloads), or open Xcode, go to ```Preferences->Downloads```, download it from here or if you are using OSX 10.9 type the following command in the terminal\n\n```sh\n$ xcode-select --install\n```\n\nNow, installing the needed compiler to build ruby from source using Homebrew (In case you don't know what Homebrew is and you are using Mac OSX, I suggest you go immediately to [its website](https://github.com/Homebrew/homebrew) and read the docs to install it)\n\n```sh\n$ brew install apple-gcc42\n```\n\nThe second thing we must do is installing a ruby version manager to manage and install ruby.  In Ruby world, [RVM](http://rvm.io), [rbenv](https://github.com/sstephenson/rbenv), [chruby](https://github.com/postmodern/chruby) are the 3 most popular version manager. I used **rvm**, but it's just too heavy so I switch to **rbenv** and have been happy with it so far (I haven't tried **chruby** yet but have heard some good things about it). Installing rbenv is really easy with Homebrew\n\n```sh\n$ brew install apple-gcc42\n$ brew install rbenv\n```\n\nIn case, brew does not add the rbenv bootstrap command to your ```.bashrc``` or ```.zshrc```, do it yourself\n\n```sh\n# .zshrc or .bashrc\n…\nif which rbenv > /dev/null; then eval \"$(rbenv init -)\"; fi\n```\n\nDefault, **rbenv** will create a ```.rbenv``` folder in your home folder and use it to hold ruby installations and gems but I prefer to use Homebrew's directories so I do as Homebrew's instruction and add the following to my ```.zprofile``` (.bashrc, .zshrc… in your case)\n\n```sh\nexport RBENV_ROOT=/usr/local/var/rbenv\n```\n\nWe also must install **ruby-build** so that rbenv can download and install ruby\n\n```sh\n$ brew install ruby-build\n```\n\nYay, we are ready to install ruby with rbenv\n\n```sh\n$ rbenv install 2.0.0.p353 # The latest ruby version\n$ rbenv global 2.0.0.p353 # Make it the default ruby version instead of system one\n…\n$ ruby -v\nruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-darwin13.0.0]\n$ which ruby\n/usr/local/var/rbenv/shims/ruby\n$ which gem\n/usr/local/var/rbenv/shims/gem\n```\n\n\nNext is installing some necessary gems (for me)\n\n```sh\n$ rbenv install 2.0.0.p353 # The latest ruby version\n$ gem install bundler rails pry cocoapods awesome_print\n# Rehash so that shim executables are available for newly installed gems\n$ rbenv rehash \n```\n\nI also installed some useful rbenv plugins using brew (the main reason that I use brew's directories for rbenv: rbenv plugins installed with brew work nicely with brew's directories). \n\n```sh\n# You can google, and find out the functions of each plugin (They are pretty useful)\n$ brew install rbenv-binstubs rbenv-default-gems rbenv-gem-rehash rbenv-vars \n```\n\nCongratulation, we are all set now. Let create our first rails app.\n\n```sh\n$ rails new hello_world\n$ cd hello_world\n# Want to know what the following command do, go to rbenv docs or I will cover it in a later blog post\n$ bundle install —binstub .bundle/bin \n```\n\n\n"},{"title":"Ditching Oh-my-zsh for Prezto","slug":["2013","12","15","ditching-oh-my-zsh-for-prezto"],"uri":"2013/12/15/ditching-oh-my-zsh-for-prezto","updatedTime":"2013/12/15","content":"\n#### Oh My Zsh, full of features but slow\nI'm a long time user of [Oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh). After setting up a new system (OSX or Linux, of course, no Windows), the first thing I often do is changing my default shell to Zsh and installing Oh-my-zsh. It's a brilliant configuration framework for zsh with a lot of themes and plugins that make it a joy to working in the terminal. But it has a major drawback, slow startup time. For me, with a lot of plugins enabled, it often takes several seconds for the terminal in iTerm2 to be fully ready.\n\n#### Enter Prezto\nI've heard of [prezto](https://github.com/sorin-ionescu/prezto) before, but at that time, to me, Oh-my-zsh is too good and the thought of having to learn the convention and update my current configuration to that of a new framework made me feel lazy :) But today, after reading a thread in StackOverflow that stated that Prezto is an improvement to Oh-my-zsh and it has no slow startup time issue, I decided to give it a try.\n\nInstalling presto is really straight forward, just following the guide in its website (remember to uninstall Oh-my-zsh and backup your configuration).\n\n```sh\n# Uninstall oh my zsh\n$ uninstall_oh_my_zsh\n\n# Open new shell, open zsh and clone the presto repo\n$ git clone --recursive https://github.com/sorin-ionescu/prezto.git \"${ZDOTDIR:-$HOME}/.zprezto\"\n\n# Get prezto's default configuration\n$ setopt EXTENDED_GLOB\nfor rcfile in \"${ZDOTDIR:-$HOME}\"/.zprezto/runcoms/^README.md(.N); do\n  ln -s \"$rcfile\" \"${ZDOTDIR:-$HOME}/.${rcfile:t}\"\ndone\n\n# Change default shell to zsh\n$ chsh -s /bin/zsh\n```\n\nAfter that, you are done, prezto is ready at your command. I was really impressed with prezto, even with a lot of modules enabled (git, rails, ruby, python, node...), it's still very fast compared to Oh-my-zsh. Now all that left is to configure prezto to my liking. I did have to convert my shell settings in Oh-my-zsh's ***.zshrc*** to that of Prezto but it only took a small amount of time. To modify and add custom configuration, in my case, you just have to make changes to those 3 files that prezto symlinks in your home folder: ***.zprofile***, ***.zshrc***, ***.zpreztorc***\n\nI added my custom paths to **.zprofile** so that they will be available for even apps outside of the terminal\n\n```sh\n...\n# GO\nexport GOPATH=$HOME/SkyDrive/go\n\n# Set the list of directories that Zsh searches for programs.\npath=(\n  /usr/local/{bin,sbin}\n  $GOPATH/bin\n  $HOME/.cabal/bin\n  /opt/homebrew-cask/Caskroom/postgres/latest/Postgres.app/Contents/MacOS/bin\n  /usr/local/heroku/bin\n  $path\n)\n...\n```\n\nIn **.zshrc** file, I added my aliases and some variables for working with python\n\n```sh\n...\n# Alias\n# OSX\nalias fixow='/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain user;killall Finder;echo \"Open With has been rebuilt, Finder will relaunch\"'\n# tmux\nalias tma='tmux attach -d -t'\nalias tmn='tmux new -s $(basename $(pwd))'\nalias tml='tmux list-sessions'\n# bower\nalias bower='noglob bower'\n\n# Python virtualenv configuration\nexport WORKON_HOME=$HOME/.virtualenvs\nexport VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'\n...\n```\n\nAnd in **.zpreztorc**, I added the modules that I need (git, ruby, python, node...) and configure prezto to use a custom theme that I modified from the default sorin theme.\n\n```sh\n...\n# prezto modules\nzstyle ':prezto:load' pmodule \\\n  'environment' \\\n  'terminal' \\\n  'editor' \\\n  'history' \\\n  'history-substring-search' \\\n  'directory' \\\n  'spectrum' \\\n  'utility' \\\n  'completion' \\\n  'homebrew' \\\n  'osx' \\\n  'ruby' \\\n  'rails' \\\n  'git' \\\n  'node' \\\n  'python' \\\n  'haskell' \\\n  'syntax-highlighting' \\\n  'tmux' \\\n  'utility' \\\n  'prompt'\n...\n# presto theme\nzstyle ':prezto:module:prompt' theme 'superlinh'\n```\n\n\nAnd tada, this is my final product:\n\n\n![Prezto Image](/assets/shell_prezto.png)\n\nGenerally, I'm pretty pleased with prezto. I think I'm gonna use it in my terminal from now on. You can get all of my configurations and custom theme here on [Github](https://github.com/linhmtran168/mac_dotfiles).\n"},{"title":"Setup boris with MAMP in Mac OSX Mavericks","slug":["2013","12","10","setup-boris-with-mamp-in-mac-osx-mavericks"],"uri":"2013/12/10/setup-boris-with-mamp-in-mac-osx-mavericks","updatedTime":"2013/12/10","content":"\nFor me who is used to having REPL as an essential tools for development, [Boris](https://github.com/d11wtq/boris) is a must have when developing PHP web app.\nBut after updating to MAMP 2.0 and PHP 5.5.3, it stopped working. There is no error output, the REPL just doesn't appear.\nAfter several hours of googling, I found out the reason is that MAMP's PHP is built with out **pcntl** and **readline** support, which boris depends on. To get those features, there is no other way then manually compile and add them to MAMP's PHP installation.\n\nFirst, we need to download the source code for MAMP's PHP. In my case it's PHP 5.5.3\n\n```sh\n$ php -v\nCopyright (c) 1997-2013 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2013 Zend Technologies\n    with Zend OPcache v7.0.3-dev, Copyright (c) 1999-2013, by Zend Technologies\n\n$ wget http://museum.php.net/php5/php-5.5.3.tar.gz\n$ tar -xzvf php-5.5.3.tar.gz\n```\n\nAfter that change the folder name to ***php*** and move it ***include*** folder in MAMP's PHP 5.5.3 folder\n\n```sh\n$ mv php-5.5.3 php\n$ mkdir -p /Applications/MAMP/bin/php/php5.5.3/include\n$ mv php /Applications/MAMP/bin/php/php5.5.3/include\n```\n\nThen, use the configure it to prepare all the necessary header files\n\n```sh\n$ mv php-5.5.3 php\n$ cd /Applications/MAMP/bin/php/php5.5.3/include/php\n$ ./configure\n```\n\nNow, we process to build the **pcntl** and **readline** extension.\nBut before that, we must set some flags so that they are compiled with dual 32bit and 64bit architecture as MAMP PHP was built this way.\n\n```sh\n$ MACOSX_DEPLOYMENT_TARGET=10.9\n$ CFLAGS=\"-arch i386 -arch x86_64 -g -Os -pipe -no-cpp-precomp\"\n$ CCFLAGS=\"-arch i386 -arch x86_64 -g -Os -pipe\"\n$ CXXFLAGS=\"-arch i386 -arch x86_64 -g -Os -pipe\"\n$ LDFLAGS=\"-arch i386 -arch x86_64 -bind_at_load\"\n$ export CFLAGS CXXFLAGS LDFLAGS CCFLAGS MACOSX_DEPLOYMENT_TARGET\n```\n\nNow, what left is compiling the extensions, move the compiled ***.so*** files to MAMP's PHP extensions directory:\n\n```sh\n$ cd ext/pcntl\n$ phpize\n$ ./configure\n$ make\n$ cp modules/pcntl.so /Applications/MAMP/bin/php/php5.5.3/lib/php/extensions/no-debug-non-zts-20121212\n$ cd ../readline\n$ phpize\n$ ./configure\n$ make\n$ cp modules/readline.so /Applications/MAMP/bin/php/php5.5.3/lib/php/extensions/no-debug-non-zts-20121212\n```\n\nFinally edit the MAMP's PHP php.ini file to include those extensions\n\n```sh\n$ echo \"extension=pcntl.so\\nextension=readline.so\" >> /Applications/MAMP/bin/php/php5.5.3/conf/php.ini\n```\n\nNow we are done, just install boris if you haven't done so and enjoy playing PHP code in the terminal\n\n```sh\n$ brew install boris\n$ boris\n[1] boris> echo \"Hello World!\\n\";\nHello World!\n[2] boris>\n```\n"}]},"__N_SSG":true}